/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include<fstream>
#include<cstdlib>
#include<vector>
#include<map>
#include<bits/stdc++.h>

using namespace std;
#define MIN_BALANCE 500;
class insufficientBalance{};

class Account{
  private:
    long accountNumber;
    string firstName;
    string lastName;
    float balance;
    static long nextAccountNumber;
  public:
    Account(){};
    Account(string fname, string lname, float balance);
    long getAccountNumber(){return accountNumber;}
    string getFirstName(){return firstName;}
    string getLastName(){return lastName;}
    float getBalance(){return balance;}
    
    void Deposit(float amount);
    void Withdraw(float amount);
    static void setLastAccountNumber(long accountNumber);
    static long getLastAccountNumber();
    friend ofstream & operator <<(ofstream &ofs, Account &acc);
    friend ifstream & operator >>(ifstream &ifs, Account &acc);
    friend ostream & operator <<(ostream &os, Account &acc);
};
long Account::nextAccountNumber=0;

class Bank{
    private:
        map<long, Account>accounts;
    public:
        Bank();
        Account OpenAccount(string fname, string lname, float balance);
        Account balanceEnquiry(long accountNumber);
        Account Deposit(long accountNumber, float amount);
        Account Withdraw(long accountNumber, float amount);
        void CloseAccount(long accountNumber);
        void showAllAccount();
        ~Bank();
};

int main()
{
    Bank b;
    Account acc;
    
    int choice;
    string fname;
    string lname;
    long accountNumber;
    float balance;
    float amount;
    cout<<"**Banking System**"<<endl;
    do{
        cout<<"\n\t Select one option below";
        cout<<"\n\t1 Open an Account";
        cout<<"\n\t2 Balance Enquiry";
        cout<<"\n\t3 Deposit";
        cout<<"\n\t4 Withdrawl";
        cout<<"\n\t5 Close an account";
        cout<<"\n\t6 Show all accounts";
        cout<<"\n\t7 Quit";
        cout<<"\n Enter your choice";
        cin>>choice;
        switch(choice){
            case 1: 
                cout<<"Enter First Name";
                cin>>fname;
                cout<<"Enter last name";
                cin>>lname;
                cout<<"Enter initial balance";
                cin>>balance;
                acc=b.OpenAccount(fname, lname, balance);
                cout<<"Congradulation Account is created "<<endl;
                cout<<acc;
                break;
            case 2: 
                cout<<"Enter your account number: ";
                cin>>accountNumber;
                acc=b.balanceEnquiry(accountNumber);
                cout<<endl<<"Your account details "<<endl;
                cout<<acc;
                break;
            case 3:
                cout<<"Enter your Account number: ";
                cin>>accountNumber;
                cout<<"Enter balance: ";
                cin>>amount;
                acc=b.Deposit(accountNumber, amount);
                cout<<endl<<"Your amount is deposited "<<endl;
                cout<<acc;
                break;
            case 4:
                cout<<"Enter your Account number: ";
                cin>>accountNumber;
                cout<<"Enter balance: ";
                cin>>amount;
                acc=b.Withdraw(accountNumber, amount);
                cout<<endl<<"Amount withdrawl "<<endl;
                cout<<acc;
                break;
            case 5:
                cout<<"Enter your account number: ";
                cin>>accountNumber;
                b.CloseAccount(accountNumber);
                cout<<endl<<"your account is closed "<<endl;
                cout<<acc;
            case 6: 
                b.showAllAccount();
                break;
            case 7: break;
            default: 
                cout<<"\n Enter correct choice";
                exit(0);
        }
    }while(choice !=7);
    return 0;
}

Account::Account(string fname, string lname, float balance){
    nextAccountNumber++;
    accountNumber=nextAccountNumber;
    firstName=fname;
    lastName=lname;
    this->balance=balance;
}

void Account::Deposit(float amount){
    balance=+amount;
}
void Account::Withdraw(float amount){
    if(balance-amount<500){
        throw insufficientBalance();
    }else{
        balance-=amount;
    }
}

void Account::setLastAccountNumber(long accountNumber){
    nextAccountNumber=accountNumber;
}

long Account::getLastAccountNumber(){
    return nextAccountNumber;
}

ofstream & operator <<(ofstream &ofs, Account &acc)
{
    ofs<<acc.accountNumber<<endl;
    ofs<<acc.firstName<<endl;
    ofs<<acc.lastName<<endl;
    ofs<<acc.balance<<endl;
    return ofs;
}

ifstream & operator >>(ifstream &ifs, Account &acc){
    ifs>>acc.accountNumber;
    ifs>>acc.firstName;
    ifs>>acc.lastName;
    ifs>>acc.balance;
    return ifs;
}

ostream & operator <<(ostream &os, Account &acc){
    os<<"First Nmae: "<<acc.getFirstName()<<endl;
    os<<"Last Name: "<<acc.getLastName()<<endl;
    os<<"Account Number: "<<acc.getAccountNumber()<<endl;
    os<<"Balance: "<<acc.getBalance()<<endl;
    return os;
}

Bank::Bank(){
    Account account;
    ifstream infile;
    infile.open("Bank.data");
    if(!infile){
        return;
    }
    while(!infile.eof()){
        infile>>account;
        accounts.insert(pair<long,Account>(account.getAccountNumber(),account));
    }
Account::setLastAccountNumber(account.getAccountNumber());
infile.close();
}
Account Bank::OpenAccount(string fname, string lname, float balance){
    ofstream outfile;
    Account account(fname, lname, balance);
    accounts.insert(pair<long, Account>(account.getAccountNumber(), account));
    outfile.open("Bank.data", ios::trunc);
    
    map<long,Account>::iterator itr;
    for(itr=accounts.begin(); itr!=accounts.end(); itr++){
        outfile<<itr->second;
    }
    outfile.close();
    return account;
}

Account Bank::balanceEnquiry(long accountNumber){
    map<long, Account>::iterator itr=accounts.find(accountNumber);
    return itr->second;
}

Account Bank::Deposit(long accountNumber, float amount){
    map<long, Account>::iterator itr=accounts.find(accountNumber);
    itr->second.Deposit(amount);
    return itr->second;
}

Account Bank::Withdraw(long accountNumber, float amount){
    map<long, Account>::iterator itr=accounts.find(accountNumber);
    itr->second.Withdraw(amount);
    return itr->second;
}

void Bank::CloseAccount(long accountNumber){
    map<long, Account>::iterator itr=accounts.find(accountNumber);
    cout<<"Account Deleted"<<itr->second;
    accounts.erase(accountNumber);
}

void Bank::showAllAccount(){
    map<long, Account>::iterator itr;
    for(itr=accounts.begin(); itr!=accounts.end(); itr++){
        cout<<"Account "<<itr->first<<endl<<itr->second<<endl;
    }
}

Bank::~Bank(){
    ofstream outfile;
    outfile.open("Bank.data", ios::trunc);
    map<long,Account>::iterator itr;
    for(itr=accounts.begin(); itr!=accounts.end(); itr++){
        outfile<<itr->second;
    }
    outfile.close();
}

